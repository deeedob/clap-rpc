syntax = "proto3";
package v0.api.events;

message Server {
    EventMessage event = 1;
}

message Client {
    enum Request {
        NOTE_ENABLE = 0;
        NOTE_DISABLE = 1;
        PARAM_ENABLE = 2;
        PARAM_DISABLE = 3;
        MIDI_ENABLE = 4;
        MIDI_DISABLE = 5;
        TRANSPORT_ENABLE = 6;
        TRANSPORT_DISABLE = 7;
    }

    oneof data {
        EventMessage event = 1;
        Request request = 2;
    }
}

message EventMessage {
    enum Event {
        NOTE = 0;
        NOTE_EXPRESSION = 1;
        PARAMETER = 2;
        PARAMETER_GESTURE = 3;
        MIDI = 4;
        TRANSPORT = 5;
    }
    Event event = 1;
    uint32 flags = 2;
    oneof data {
        Note note = 3;
        NoteExpression note_expression = 4;
        Parameter param = 5;
        ParameterGesture param_gesture = 6;
        Midi midi = 7;
        Transport transport = 8;
    }
}

message Note {
    enum Type {
        ON = 0;
        OFF = 1;
        CHOKE = 2;
        END = 3;
        EXPRESSION = 4;
    }
    Type type = 1;
    double velocity = 6;

    int32 note_id = 2;
    int32 port_index = 3;
    int32 channel = 4;
    int32 key = 5;
}

message NoteExpression {
    enum Type {
        VOLUME = 0;
        PAN = 1;
        TUNING = 2;
        VIBRATO = 3;
        EXPRESSION = 4;
        BRIGHTNESS = 5;
        PRESSURE = 6;
    }
    Type type = 1;
    double value = 6;

    int32 note_id = 2;
    int32 port_index = 3;
    int32 channel = 4;
    int32 key = 5;
}

message Parameter {
    enum Type {
        VALUE = 0;
        MODULATION = 1;
    }
    Type type = 1;
    uint32 param_id = 2;
    double value = 3;

    int32 note_id = 4;
    int32 port_index = 5;
    int32 channel = 6;
    int32 key = 7;
}

message ParameterGesture {
    enum Type {
        BEGIN = 0;
        END = 1;
    }
    Type type = 1;
    uint32 param_id = 2;
}

message Midi {
  enum Type {
      MIDI1 = 0;
      MIDI_SYSEX = 1;
      MIDI2 = 2;
  }
  Type type = 1;
  uint32 port_index = 2;
  bytes data = 3;
}

message Transport {
    message Position {
        int64 beats = 1;
        int64 seconds = 2;
    }
    message Tempo {
        double value = 1;
        double increment = 2;
    }
    message Loop {
        int64 start_beats = 1;
        int64 end_beats = 2;
        int64 start_seconds = 3;
        int64 end_seconds = 4;
    }
    message TimeSignature {
        uint32 numerator = 1;
        uint32 denominator = 2;
    }

    uint32 flags = 1;
    optional Position position = 2;
    optional Tempo tempo = 3;
    optional Loop loop = 4;
    optional TimeSignature time_signature = 5;
}

